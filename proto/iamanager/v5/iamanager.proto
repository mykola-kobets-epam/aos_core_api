syntax = "proto3";

package iamanager.v5;

import "google/protobuf/empty.proto";
import "common/v1/common.proto";

service IAMPublicService {
    rpc GetNodeInfo(google.protobuf.Empty) returns (NodeInfo) {}
    rpc SubscribeCertChanged(SubscribeCertChangedRequest) returns (stream CertInfo) {}
}

service IAMPublicIdentityService {
    rpc GetSystemInfo(google.protobuf.Empty) returns (SystemInfo) {}
    rpc GetSubjects(google.protobuf.Empty) returns (Subjects) {}
    rpc SubscribeSubjectsChanged(google.protobuf.Empty) returns (stream Subjects) {}
}

service IAMPublicPermissionsService {
    rpc GetPermissions(PermissionsRequest) returns (PermissionsResponse) {}
}

service IAMPublicNodesService {
    rpc GetAllNodeIDs(google.protobuf.Empty) returns (NodesID) {}
    rpc GetNodeInfo(GetNodeInfoRequest) returns (NodeInfo) {}
    rpc SubscribeNodeChanged(google.protobuf.Empty) returns (stream NodeInfo) {}
    rpc RegisterNode(stream IAMOutgoingMessages) returns (stream IAMIncomingMessages) {}
}

service IAMNodesService {
    rpc PauseNode(PauseNodeRequest) returns (PauseNodeResponse) {}
    rpc ResumeNode(ResumeNodeRequest) returns (ResumeNodeResponse) {}
}

service IAMProvisioningService {
    rpc GetCertTypes(GetCertTypesRequest) returns (CertTypes) {}
    rpc StartProvisioning(StartProvisioningRequest) returns (StartProvisioningResponse) {}
    rpc FinishProvisioning(FinishProvisioningRequest) returns (FinishProvisioningResponse) {}
    rpc Deprovision(DeprovisionRequest) returns (DeprovisionResponse) {}
}

service IAMCertificateService {
    rpc CreateKey(CreateKeyRequest) returns (CreateKeyResponse) {}
    rpc ApplyCert(ApplyCertRequest) returns (ApplyCertResponse) {}
}

service IAMPermissionsService {
    rpc RegisterInstance(RegisterInstanceRequest) returns (RegisterInstanceResponse) {}
    rpc UnregisterInstance(UnregisterInstanceRequest) returns (google.protobuf.Empty) {}
}

message PartitionInfo {
    string          name       = 1;
    repeated string types      = 2;
    uint64          total_size = 3;
    string          path       = 4;
}

message CPUInfo {
    string model_name  = 1;
    uint64 num_cores   = 2;
    uint64 num_threads = 3;
    string arch        = 4;
    string arch_family = 5;
    uint64 max_dmips   = 6;
}

message NodeAttribute {
    string name  = 1;
    string value = 2;
}

message NodeInfo {
    string                 node_id    = 1;
    string                 node_type  = 2;
    string                 name       = 3;
    string                 status     = 4;
    string                 os_type    = 5;
    repeated CPUInfo       cpus       = 6;
    uint64                 max_dmips  = 7;
    uint64                 total_ram  = 8;
    repeated PartitionInfo partitions = 9;
    repeated NodeAttribute attrs      = 10;
    common.v1.ErrorInfo    error      = 11;
}

message SubscribeCertChangedRequest {
    string type   = 1;
    bytes  issuer = 2;
    string serial = 3;
}

message CertInfo {
    string type     = 1;
    string cert_url = 2;
    string key_url  = 3;
}

message SystemInfo {
    string system_id  = 1;
    string unit_model = 2;
}

message Subjects {
    repeated string subjects = 1;
}

message PermissionsRequest {
    string secret               = 1;
    string functional_server_id = 2;
}

message PermissionsResponse {
    common.v1.InstanceIdent instance    = 1;
    Permissions             permissions = 2;
}

message NodesID {
    repeated string ids = 1;
}

message GetCertTypesRequest {
    string node_id = 1;
}

message CertTypes {
    repeated string types = 1;
}

message CreateKeyRequest {
    string node_id  = 1;
    string subject  = 2;
    string type     = 3;
    string password = 4;
}

message CreateKeyResponse {
    string              node_id = 1;
    string              type    = 2;
    string              csr     = 3;
    common.v1.ErrorInfo error   = 4;
}

message ApplyCertRequest {
    string node_id = 1;
    string type    = 2;
    string cert    = 3;
}

message ApplyCertResponse {
    string              node_id  = 1;
    string              type     = 2;
    string              cert_url = 3;
    string              serial   = 4;
    common.v1.ErrorInfo error    = 5;
}

message Permissions {
    map<string, string> permissions = 1;
}

message RegisterInstanceRequest {
    common.v1.InstanceIdent  instance    = 1;
    map<string, Permissions> permissions = 2;
}

message RegisterInstanceResponse {
    string secret = 1;
}

message UnregisterInstanceRequest {
    common.v1.InstanceIdent instance = 1;
}

message GetNodeInfoRequest {
    string node_id = 1;
}

message PauseNodeRequest {
    string node_id = 1;
}

message PauseNodeResponse {
    common.v1.ErrorInfo error = 1;
}

message ResumeNodeRequest {
    string node_id = 1;
}

message ResumeNodeResponse {
    common.v1.ErrorInfo error = 1;
}

message StartProvisioningRequest {
    string node_id  = 1;
    string password = 2;
}

message StartProvisioningResponse {
    common.v1.ErrorInfo error = 1;
}

message FinishProvisioningRequest {
    string node_id  = 1;
    string password = 2;
}

message FinishProvisioningResponse {
    common.v1.ErrorInfo error = 1;
}

message DeprovisionRequest {
    string node_id  = 1;
    string password = 2;
}

message DeprovisionResponse {
    common.v1.ErrorInfo error = 1;
}

message IAMIncomingMessages {
    oneof IAMIncomingMessage {
        StartProvisioningRequest  start_provisioning_request  = 1;
        GetCertTypesRequest       get_cert_types_request      = 2;
        FinishProvisioningRequest finish_provisioning_request = 3;
        DeprovisionRequest        deprovision_request         = 4;
        PauseNodeRequest          pause_node_request          = 5;
        ResumeNodeRequest         resume_node_request         = 6;
        CreateKeyRequest          create_key_request          = 7;
        ApplyCertRequest          apply_cert_request          = 8;
    }
}

message IAMOutgoingMessages {
    oneof IAMOutgoingMessage {
        NodeInfo                   node_info                    = 1;
        StartProvisioningResponse  start_provisioning_response  = 2;
        CertTypes                  cert_types_response          = 3;
        FinishProvisioningResponse finish_provisioning_response = 4;
        DeprovisionResponse        deprovision_response         = 5;
        PauseNodeResponse          pause_node_response          = 6;
        ResumeNodeResponse         resume_node_response         = 7;
        CreateKeyResponse          create_key_response          = 8;
        ApplyCertResponse          apply_cert_response          = 9;
    }
}
